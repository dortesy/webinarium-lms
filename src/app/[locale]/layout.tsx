import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Header } from "@/app/[locale]/(landing)/header";
import { Footer } from "@/app/[locale]/(landing)/footer";
import {auth} from "@/auth";
import { SessionProvider } from "next-auth/react";
import {NextIntlClientProvider} from "next-intl";
import {getMessages} from "@/i18n";
import { headers } from 'next/headers';
import {Toaster} from "@/components/ui/toaster";
import localFont from 'next/font/local'

const golos = localFont({
  src: [
    {
      path: '../../../public/fonts/GolosText-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: '../../..//public/fonts/GolosText-Medium.woff2',
      weight: '500',
      style: 'normal',
    },
    {
      path: '../../..//public/fonts/GolosText-DemiBold.woff2',
      weight: '600',
      style: 'normal',
    },
    {
      path: '../../..//public/fonts/GolosText-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
    {
      path: '../../..//public/fonts/GolosText-Black.woff2',
      weight: '900',
      style: 'normal',
    },
  ],
})


export const metadata: Metadata = {
    title: "Create Next App",
    description: "Generated by create next app",
};



type Props = {
    children: React.ReactNode;
    params: {
        locale: "ru" | "uz";
    }
};

const RootLayout: React.FC<Props> = async ({
                                               children, params: {locale}}) => {

    const session = await auth();
    const messages = await getMessages(locale);
    const pathname = headers().get('x-next-pathname') as string;
    const coursesRegex = /courses\/[0-9a-fA-F-]+/;
    const headerStyle = "lg:max-w-screen-2xl mx-auto w-full dark"
    const headerContains = coursesRegex.test(pathname);
    const testContains = pathname.includes('test');

    if (testContains) {
      return (
        <html lang={locale}>
          <body className={golos.className}>
                <main className={`${!headerContains ? 'lg:max-w-screen-2xl' : ''}  mx-auto flex-1 w-full box-content`}>
                  {children}
                </main>
          </body>
        </html>
      )
    }
    return (


            <html lang={locale}>
                <body className={golos.className}>
                <NextIntlClientProvider messages={messages}>
                    <SessionProvider session={session}>
                      <div className="min-h-screen flex flex-col bg-stone-50">
                        <header id="header" className="sticky top-0 z-20 transition-all">
                          <div className={`mx-auto w-full ${!headerContains ? 'lg:max-w-screen-2xl' : 'dark'}`}>
                            <Header />
                          </div>
                        </header>

                        <main className={`${!headerContains ? 'lg:max-w-screen-2xl' : ''}  mx-auto flex-1 w-full box-content`}>
                          {children}
                          <Toaster />
                        </main>
                      </div>

                    </SessionProvider>
                </NextIntlClientProvider>
                </body>
            </html>




    );
}


export default RootLayout;