generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Language {
  RU
  UZ
}

enum EnrollmentStatus {
  ENROLLED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isVerified      Boolean        @default(false)
  role            Role           @relation(fields: [roleId], references: [id])
  roleId          Int            @default(1)
  accounts        Account[]
  sessions        Session[]
  profile         UserProfile?
  createdCourses  Course[]       @relation("CreatedCourses")
  enrolledCourses Enrollment[]
  progress        UserProgress[]
  ratings         Rating[]
  payments        Payment[]
  wishlist        Wishlist[]
  Media           Media[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserProfile {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  firstName    String?
  lastName     String?
  bio          String?
  profileImage String?
  telegram     String?
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  courses     Course[]
  parent      Category?  @relation("CategoryTree", fields: [parentId], references: [id], onDelete: SetNull)
  parentId    String?
  children    Category[] @relation("CategoryTree")
}

model Course {
  id          String         @id @default(uuid())
  title       String
  slug        String         @unique
  description String?
  creator     User           @relation("CreatedCourses", fields: [creatorId], references: [id])
  creatorId   String
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  price       Decimal?
  duration    Int?
  level       CourseLevel?
  language    Language?
  image       Media?         @relation(fields: [imageId], references: [id])
  imageId     String?        @unique
  status      CourseStatus? // DRAFT, PUBLISHED, ARCHIVED - TODO NOT ACTIVE RIGHT NOW
  published   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  sections    Section[]
  enrollments Enrollment[]
  progress    UserProgress[]
  ratings     Rating[]
  payments    Payment[]
  wishlist    Wishlist[]
  tags        CourseTag[]
}

model Section {
  id          String   @id @default(uuid())
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  title       String
  description String?
  position    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
}

model Lesson {
  id          String         @id @default(uuid())
  section     Section        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
  title       String
  slug        String         @unique
  description String?
  video       Media?         @relation(fields: [videoId], references: [id])
  videoId     String?        @unique
  duration    Int?
  position    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  progress    UserProgress[]
}

model Media {
  id          String    @id @default(uuid())
  url         String    @unique
  type        MediaType
  size        Int
  title       String?
  description String?
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
  course      Course?
  lesson      Lesson?
  isPublic    Boolean   @default(false)
}

model Enrollment {
  id          Int               @id @default(autoincrement())
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  course      Course            @relation(fields: [courseId], references: [id])
  courseId    String
  enrolledAt  DateTime          @default(now())
  completedAt DateTime?
  status      EnrollmentStatus?

  @@unique([userId, courseId])
}

model UserProgress {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String
  lesson        Lesson   @relation(fields: [lessonId], references: [id])
  lessonId      String
  completed     Boolean  @default(false)
  videoProgress Int      @default(0)
  updatedAt     DateTime @updatedAt

  @@unique([userId, courseId, lessonId])
}

model Rating {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Payment {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      String
  amount        Decimal
  currency      String
  transactionId String?
  status        PaymentStatus?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([userId, courseId, transactionId])
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Tag {
  id      String      @id @default(uuid())
  name    String      @unique
  courses CourseTag[]
}

model CourseTag {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String

  @@id([courseId, tagId])
}
